service: serverless-instagram-pyconcz

plugins:
  - serverless-python-requirements

custom:
    config: ${file(config.json)}

provider:
  name: aws
  region: us-east-1
  runtime: python3.6
  memorySize: 128
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:*
      Resource: arn:aws:s3:::${self:custom.config.UPLOAD_IMAGE_BUCKET_NAME}
    - Effect: Allow
      Action:
        - s3:*
      Resource: arn:aws:s3:::${self:custom.config.UPLOAD_IMAGE_BUCKET_NAME}/*
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource: "*"
    - Effect: Allow
      Action:
        - dynamodb:PutItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:custom.config.IMAGE_INFO_TABLE_NAME}"

package:
  individually: true

functions:
  authorizer:
    module: authorizer
    handler: authorizer.handler
    environment:
      AUTH0_SECRET: ${self:custom.config.AUTH0_SECRET}
      AUTH0_CLIENT_ID: ${self:custom.config.AUTH0_CLIENT_ID}

  signedUrl:
    module: signed_url
    handler: generate_signed_url.handler
    environment:
      UPLOAD_IMAGE_BUCKET_NAME: ${self:custom.config.UPLOAD_IMAGE_BUCKET_NAME}
    events:
      - http:
          cors: true
          method: get
          path: /get_signed_url
          authorizer: authorizer

  addImageInfo:
    module: image_info
    handler: add_image_info.handler
    environment:
        IMAGE_INFO_TABLE_NAME: ${self:custom.config.IMAGE_INFO_TABLE_NAME}

resources:
  Resources:
    AddImageInfoLambdaInvokationPermission:
      DependsOn:
        - AddImageInfoLambdaFunction
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName:
          "Fn::GetAtt": [ AddImageInfoLambdaFunction, Arn ]
        Action: "lambda:InvokeFunction"
        Principal: "s3.amazonaws.com"
        SourceArn: "arn:aws:s3:::${self:custom.config.UPLOAD_IMAGE_BUCKET_NAME}"

    UploadBucket:
      Type: AWS::S3::Bucket
      DeletionPolicy: Retain
      DependsOn:
        - AddImageInfoLambdaInvokationPermission
      Properties:
        BucketName: ${self:custom.config.UPLOAD_IMAGE_BUCKET_NAME}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - "*"
              AllowedMethods:
                - "PUT"
              AllowedHeaders:
                - "*"
              MaxAge: 3000
        NotificationConfiguration:
          LambdaConfigurations:
            - Event: "s3:ObjectCreated:*"
              Function:
                "Fn::GetAtt": [ AddImageInfoLambdaFunction, Arn ]

    ImageInfoTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: user
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: N
        KeySchema:
          - AttributeName: user
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.config.IMAGE_INFO_TABLE_NAME}
